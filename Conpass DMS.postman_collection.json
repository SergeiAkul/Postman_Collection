{
	"info": {
		"_postman_id": "1e2e30bd-fc94-4fd5-b5ce-20e0c6cecc10",
		"name": "Conpass DMS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15492228"
	},
	"item": [
		{
			"name": "GetToken",
			"item": [
				{
					"name": "GetToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.result);",
									"",
									"pm.test(\"Token is: \" + jsonData.result, function () {",
									"    pm.expect(pm.response.text()).to.include(\"result\");",
									"});",
									"",
									"pm.test(\"jsonrpc: \" + jsonData.jsonrpc, function () {",
									"    pm.expect(pm.response.text()).to.include(\"2.0\");",
									"});",
									"",
									"pm.test(\"ID is: \" + jsonData.id, function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"server.GetToken\", \n    \"id\": \"{5883D59E-209A-4680-A196-F57BF0F63EF5}\",\n    \"params\": {\n    \"Login\": \"admin\",\n    \"PassHash\": \"6B86B273FF34FCE19D6B804EFF5A3F5747ADA4EAA22F1D49C01E52DDB7875B4B\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetToken [Incorrect LOGIN]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.result);",
									"",
									"pm.test(\"Error: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).to.include(\"incorrect login attempt\");",
									"});",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32020\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"2.0\",\n\"method\": \"server.GetToken\",\n\"params\":{\n\t\"Login\": \"qwertui\",\n\t\"PassHash\": \"{{PassHash}}\"\n},\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetToken [Mhetod not exist][prefix]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.result);",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "APPLICATION/JSON"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"2.0\",\n\"method\": \"s erver.GetToken\",\n\"params\":{\n\t\"Login\": \"{{AdminLogin}}\",\n\t\"PassHash\": \"{{PassHash}}\"\n},\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetToken [Mhetod not exist]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find method\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "APPLICATION/JSON"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"2.0\",\n\"method\": \"server. GetToken\",\n\"params\":{\n\t\"Login\": \"{{AdminLogin}}\",\n\t\"PassHash\": \"{{PassHash}}\"\n},\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetToken [Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.result);",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "APPLICATION/JSON"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"1.0\",\n\"method\": \"server.GetToken\",\n\"params\":{\n\t\"Login\": \"{{AdminLogin}}\",\n\t\"PassHash\": \"{{PassHash}}\"\n},\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health",
			"item": [
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"LastConfigUpdate: \" + jsonData.result.LastConfigUpdate, function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"0000-00-00T00:00:00\");",
									"});",
									"",
									"pm.test(\"Status: \" + jsonData.result.Status , function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.Health\",\n    \"id\": 2\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health [Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"LastConfigUpdate: \" + jsonData.result.LastConfigUpdate, function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"0000-00-00T00:00:00\");",
									"});",
									"",
									"pm.test(\"Status: \" + jsonData.result.Status , function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.Health\",\n    \"id\": 2\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health [Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Error: \" + jsonData.error.message + \", instead of \" + jsonData.error.data.jsonrpc  , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});",
									"",
									"pm.test(\"Code: \" + jsonData.error.code , function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"infrastructure.Health\",\n    \"id\": 2\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health [Server]",
			"item": [
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});",
									"pm.test(\"LastConfigUpdate: \" + jsonData.result.LastConfigUpdate, function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"0000-00-00T00:00:00\");",
									"});",
									"",
									"pm.test(\"Status: \" + jsonData.result.Status , function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.Health\",\n    \"id\": 2\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health [Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Error: \" + jsonData.error.message + \", instead of \" + jsonData.error.data.jsonrpc  , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});",
									"",
									"pm.test(\"Code: \" + jsonData.error.code , function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"infrastructure.Health\",\n    \"id\": 2\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health [Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.Health\",\n    \"id\": 2\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeviceRegistration",
			"item": [
				{
					"name": "DeviceRegistration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Result: \" + jsonData.result, function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});",
									"pm.environment.set(\"device\", \"Device\"+ _.random(1, 10000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"Device{{$randomInt}}\",\n\t\"Info\": \"some info about device\",\n    \"SyncTimeStamp\": \"0001-01-01T00:00:00\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration NULL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Result: \" + jsonData.result, function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});",
									"pm.environment.set(\"device\", \"Device\"+ _.random(1, 10000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": null,\n\t\"Info\": null,\n    \"SyncTimeStamp\": \"0001-01-01T00:00:00\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration [NO params]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Result: \" + jsonData.result, function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});",
									"pm.environment.set(\"device\", \"Device\"+ _.random(1, 10000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration[duplicate device]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Result: \" + jsonData.result+\". Expected: duplicate key.\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"ok\");",
									"});",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32010\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"{{device}}\",\n\t\"Info\": \"some info about device\",\n    \"SyncTimeStamp\": \"0001-01-01T00:00:00\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration[Wrong protocol  Version]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"1.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"Device{{$randomInt}}\",\n\t\"Info\": \"some info about device\",\n    \"SyncTimeStamp\": \"0001-01-01T00:00:00\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration[server][Token is absent]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Result: \" + jsonData.result, function () {",
									"    pm.expect(pm.response.text()).includes(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"Device{{$randomInt}}\",\n\t\"Info\": \"some info about device\",\n    \"SyncTimeStamp\": \"0001-01-01T00:00:00\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				}
			]
		},
		{
			"name": "DeviceRegistration [Server]",
			"item": [
				{
					"name": "DeviceRegistration[server]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Result: \" + jsonData.result, function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"Device{{$randomInt}}\",\n\t\"Info\": \"some info about device\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration [NO params] Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).to.includes(\"param\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration[server][duplicate device]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Result: \" + jsonData.result+\". Expected: duplicate key.\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"ok\");",
									"});",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \". Expected: -32010\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32010\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"{{device}}\",\n\t\"Info\": \"some info about device\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration[server][Wrong protocol  Version]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"1.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"Device{{$randomInt}}\",\n\t\"Info\": \"some info about device\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration[server][Token expired]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"Device{{$randomInt}}\",\n\t\"Info\": \"some info about device\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration[server][Token is absent]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"Device{{$randomInt}}\",\n\t\"Info\": \"some info about device\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration[server][Wrong Token]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"Device{{$randomInt}}\",\n\t\"Info\": \"some info about device\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "DeviceRegistration [NO params]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Result: \" + jsonData.result, function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});",
									"pm.environment.set(\"device\", \"Device\"+ _.random(1, 10000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.DeviceRegistration\",\n  \n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": [
						{
							"name": "DeviceRegistration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"server.DeviceRegistration\",\n  \"params\":{\n\t\"DeviceName\": \"scaner7\",\n\t\"Info\": \"kill me softly\"\n  },\n  \"id\": 1\n}"
								},
								"url": {
									"raw": "{{domain}}/rpc/v1",
									"host": [
										"{{domain}}"
									],
									"path": [
										"rpc",
										"v1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 15 May 2019 06:09:30 GMT"
								},
								{
									"key": "Content-Length",
									"value": "99"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32021,\n        \"message\": \"token expired or mismatch\",\n        \"data\": null\n    },\n    \"id\": 1\n}"
						}
					]
				}
			]
		},
		{
			"name": "DiskUsage",
			"item": [
				{
					"name": "DiskUsage [Positive]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Total: \"+jsonData.result.Total+ \", Free: \"+jsonData.result.Free+\", Used: \"+jsonData.result.Used+\", UsedPercent: \"+jsonData.result.UsedPercent+\", IsCleanup: \"+",
									"        jsonData.result.IsCleanup+ \", UsedBaseAccording: \"+jsonData.UsedBaseAccording+\", CleanUpSize: \"+ jsonData.CleanUpSize , function () {",
									"    pm.expect(pm.response.text()).to.include(\"Total\", \"Free\", \"Used\", \"UsedPercent\", \"IsCleanup\", \"UsedBaseAccording\", \"CleanUpSize\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Data recieved successfully without token.\" , function () {",
									"    pm.expect(pm.response.text()).to.include(\"Total\", \"Free\", \"Used\", \"UsedPercent\", \"IsCleanup\", \"UsedBaseAccording\", \"CleanUpSize\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [Mhetod is not exsist]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find method\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure. DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [Mhetod is not exsist][prefix]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \" infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DiskUsage [Server]",
			"item": [
				{
					"name": "DiskUsage [Positive]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Total: \"+jsonData.result.Total+ \", Free: \"+jsonData.result.Free+\", Used: \"+jsonData.result.Used+\", UsedPercent: \"+jsonData.result.UsedPercent+\", IsCleanup: \"+",
									"        jsonData.result.IsCleanup+ \", UsedBaseAccording: \"+jsonData.UsedBaseAccording+\", CleanUpSize: \"+ jsonData.CleanUpSize , function () {",
									"    pm.expect(pm.response.text()).to.include(\"Total\", \"Free\", \"Used\", \"UsedPercent\", \"IsCleanup\", \"UsedBaseAccording\", \"CleanUpSize\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [server][Positive]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Total: \"+jsonData.result.Total+ \", Free: \"+jsonData.result.Free+\", Used: \"+jsonData.result.Used+\", UsedPercent: \"+jsonData.result.UsedPercent+\", IsCleanup: \"+",
									"        jsonData.result.IsCleanup+ \", UsedBaseAccording: \"+jsonData.UsedBaseAccording+\", CleanUpSize: \"+ jsonData.CleanUpSize , function () {",
									"    pm.expect(pm.response.text()).to.include(\"Total\", \"Free\", \"Used\", \"UsedPercent\", \"IsCleanup\", \"UsedBaseAccording\", \"CleanUpSize\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [server][Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [Token expired]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [server][Token expired]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [server][Token is wrong]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "qwerty12"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [server][Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "qwerty12"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage [server][Mhetod is not exsist]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find method\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"infrastructure. DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DiskUsage[server][Mhetod is not exsist][prefix]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \" infrastructure.DiskUsage\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllPersons",
			"item": [
				{
					"name": "GetAllPersons [Positive]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Success: \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"People_GUID\");",
									"});",
									"",
									"for i "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllPersons\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPersons[Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"common.GetAllPersons\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPersons[Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Data recieved successfully without token.\" , function () {",
									"    pm.expect(pm.response.text()).to.include(\"result\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllPersons\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPersons[Mhetod is not exsist]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find method\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common. GetAllPersons\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPersons[Mhetod is not exsist][prefix]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \" common.GetAllPersons\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllPersons [Server]",
			"item": [
				{
					"name": "GetAllPersons [Positive]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Success: \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"People_GUID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllPersons\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPersons[Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"common.GetAllPersons\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPersons[Mhetod is not exsist][prefix]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \" common.GetAllPersons\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPersons[Mhetod is not exsist]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find method\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common. GetAllPersons\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPersons[Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllPersons\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OperatorRegistration",
			"item": [
				{
					"name": "OperatorRegistration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.OperatorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration[Duplicate Operator]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.OperatorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration [Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.OperatorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration[Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"1.0\",\n  \"method\": \"common.OperatorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration[Mhetod is not exsist][prefix]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"c ommon.OperatorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration[Mhetod is not exsist]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find method\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.O peratorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration [NO params]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Result: \"+jsonData.result, function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.OperatorRegistration\",\n \n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration [null params]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Result: \"+jsonData.result, function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.OperatorRegistration\",\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OperatorRegistration [Server]",
			"item": [
				{
					"name": "OperatorRegistration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.OperatorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration [Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.OperatorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration[Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"1.0\",\n  \"method\": \"common.OperatorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration[Mhetod is not exsist][prefix]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"c ommon.OperatorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration[Mhetod is not exsist]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find method\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.O peratorRegistration\",\n  \"params\":{\n\t\"ID\": \"{{$randomInt}}\",\n\t\"Name\": \"Jon{{$randomInt}}\",\n\t\"Surname\": \"Trivolta\",\n\t\"Additional1\": \"Additional1 {{$randomInt}}\",\n\t\"Additional2\": \"Additional2 {{$randomInt}}\",\n\t\"Additional3\": \"Additional3 {{$randomInt}}\"\n  },\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration [NO params]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Result: \"+jsonData.result, function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.OperatorRegistration\",\n \n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration [null params]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Result: \"+jsonData.result, function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"common.OperatorRegistration\",\n  \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllDevices",
			"item": [
				{
					"name": "GetAllDevices",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDevices[Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"common.GetAllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDevices[Wrong mhetod]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find method\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.Get AllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDevices[Wrong Prefix Mhetod]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.Get AllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllDevices [Server]",
			"item": [
				{
					"name": "GetAllDevices",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDevices[Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"common.GetAllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDevices[Wrong mhetod]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find method\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.Get AllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDevices[Wrong Prefix Mhetod]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.Get AllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperatorRegistration [Token is absent] Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllDevices[Server]",
			"item": [
				{
					"name": "GetAllDevices",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDevices[Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"common.GetAllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDevices[Wrong mhetod]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find method\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.Get AllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDevices[Wrong Prefix Mhetod]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.Get AllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDevices[Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllDevices\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllOperators",
			"item": [
				{
					"name": "GetAllOperators",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllOperators\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllOperators[Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"common.GetAllOperators\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllOperators [Wrong Mhetod]",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllOperators\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllOperators [Wrong Prefix Mhetod]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"Common.GetAllOperators\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllOperators [Server]",
			"item": [
				{
					"name": "GetAllOperators",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllOperators\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllOperators[Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"common.GetAllOperators\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllOperators [Wrong Mhetod]",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common. GetAllOperators\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllOperators [Wrong Prefix Mhetod]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32000\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message , function () {",
									"    pm.expect(pm.response.text()).includes(\"rpc: can't find service\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"Common.GetAllOperators\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllOperators [Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetAllOperators\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetScansByPerson",
			"item": [
				{
					"name": "GetScansByPerson",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"variable_key\", \"aV1vwJi5C0G+bKGx949jLw==\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Found matches.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Scans_GUID\");",
									"});",
									"",
									"//считаем количество сканов в ответе.",
									"var size = Object.keys(jsonData.result).length;",
									"pm.test(\"Count \"+ size);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"params\": \"{{People_GUID}}\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByPerson [Wrong protocol version]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"variable_key\", \"aV1vwJi5C0G+bKGx949jLw==\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"params\": \"{{People_GUID}}\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByPerson[NO any Scans]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"No any scans.\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"Scans_GUID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"params\": \"{{GUID_no_Scans}}\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByPerson[null People_GUID]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"//pm.environment.set(\"variable_key\", \"aV1vwJi5C0G+bKGx949jLw==\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"No any scans.\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"Scans_GUID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"params\": null,\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByPerson[Params is absent]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"//pm.environment.set(\"variable_key\", \"aV1vwJi5C0G+bKGx949jLw==\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"No any message.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByPerson[Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Scans_GUID is present. \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Scans_GUID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"params\": \"{{People_GUID}}\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetScansByPerson [Server]",
			"item": [
				{
					"name": "GetScansByPerson",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"variable_key\", \"aV1vwJi5C0G+bKGx949jLw==\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Found matches.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Scans_GUID\");",
									"});",
									"",
									"//считаем количество сканов в ответе.",
									"var size = Object.keys(jsonData.result).length;",
									"pm.test(\"Count \"+ size);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"params\": \"DQcJE+qlUEeRsC1TRr4BDA==\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByPerson [Wrong protocol version]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"variable_key\", \"aV1vwJi5C0G+bKGx949jLw==\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code, function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32600\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"1.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"params\": \"{{People_GUID}}\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByPerson[NO any Scans]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"No any scans.\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"Scans_GUID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"params\": \"{{GUID_no_Scans}}\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByPerson[null People_GUID]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"//pm.environment.set(\"variable_key\", \"aV1vwJi5C0G+bKGx949jLw==\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"No any scans.\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"Scans_GUID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"params\": null,\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByPerson[Params is absent]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"//pm.environment.set(\"variable_key\", \"aV1vwJi5C0G+bKGx949jLw==\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"No any message.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByPerson[Token is absent]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Code: \" + jsonData.error.code+ \", expected: -32022.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-32022\");",
									"});",
									"",
									"pm.test(\"Message: \" + jsonData.error.message, function () {",
									"    pm.expect(pm.response.text()).includes(\"token expired or mismatch\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByPerson\",\n    \"params\": \"{{People_GUID}}\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MergePeople",
			"item": [
				{
					"name": "MergePeople",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"2.0\",\n\"method\": \"server.MergePeople\",\n\"params\": {\n\"People_GUID\":\"AHpHK5XIhU+4nSrC3qUIYA==\",\n\"Mergelist\":[\"ThyJ3HPxwkGff65YrQHAKw==\",\"rWt+0cPok0Cz7P6WEf9dgg==\"]\n},\n\"id\": 1\n}\n"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UpdPeople",
			"item": [
				{
					"name": "UpdPeople",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"jsonrpc\": \"2.0\",\r\n\"method\": \"common.UpdPeople\",\r\n\"params\": {\r\n\t\t\t\"People_GUID\": \"{{People_GUID}}\",\r\n\t\t\t\"ID\": \"1\",\r\n\t\t\t\"Name\": \"vasia\",\r\n\t\t\t\"Surname\": \"romanof\",\r\n\t\t\t\"PassportNumber\": \"123123\",\r\n\t\t\t\"DateOfBirth\": \"2018-10-09\",\r\n\t\t\t\"Sex\": \"M\",\r\n\t\t\t\"PhotoPath\": \"text_1\",\r\n\t\t\t\"Additional1\": \"text_2\",\r\n\t\t\t\"Additional2\": \"text_3\",\r\n\t\t\t\"Additional3\": \"text_4\"\r\n\t\t\t},\r\n\"id\": \"1\"\r\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[ОТСУТСТВУЕТ В НОВОЙ ВЕРСИИ ДОК]GetScansByParams",
			"item": [
				{
					"name": "GetScansByParams",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByParams\",\n      \"params\":{\n      \t\"ID\": \"Very NEW Person\",\n\t\t\"Name\": null,\n\t\t\"Surname\": null,\n\t\t\"Sex\": null,\n\t\t\"DateAfter\": null,\n\t\t\"DateBefore\": null,\n\t\t\"OperatorName\": null,\n\t\t\"OperatorSurname\": null,\n\t\t\"Device\": null,\n\t\t\"Mode\": null,\n\t\t\"Torso\": null,\n\t\t\"Body\": null,\n\t\t\"Suspicion\": null\n      },\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetScansByParams Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetScansByParams\",\n      \"params\":{\n      \t\"ID\": \"Very NEW Person\",\n\t\t\"Name\": null,\n\t\t\"Surname\": null,\n\t\t\"Sex\": null,\n\t\t\"DateAfter\": null,\n\t\t\"DateBefore\": null,\n\t\t\"OperatorName\": null,\n\t\t\"OperatorSurname\": null,\n\t\t\"Device\": null,\n\t\t\"Mode\": null,\n\t\t\"Torso\": null,\n\t\t\"Body\": null,\n\t\t\"Suspicion\": null\n      },\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAccumulatedDose",
			"item": [
				{
					"name": "GetAccumulatedDose",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"jsonrpc\": \"2.0\",\n \"method\": \"common.GetAccumulatedDose\",\n      \"params\":{\n\t\t\t\t\"People_GUID\": \"UfoDtIowpkGAJNAABTRW+g==\",\n\t\t\t\t\"Cutoffdate\": null\n\t\t\t\t},\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetPeopleByParams",
			"item": [
				{
					"name": "GetPeopleByParams [ID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ID_v = pm.variables.get(\"ID\");\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ID: \"+ ID_v+ \" успешно найден.\", function () {\r",
									"    pm.expect(jsonData.result[0].ID).to.eql(ID_v);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleByParams\",\n      \"params\":{\n      \t\"ID\": \"qa3\",\n\t\t\"Name\": null,\n\t\t\"Surname\": null,\n\t\t\"Sex\": null,\n\t\t\"DateAfter\": null,\n\t\t\"DateBefore\": null,\n\t\t\"OperatorName\": null,\n\t\t\"OperatorSurname\": null,\n\t\t\"Device\": null,\n\t\t\"Mode\": null,\n\t\t\"Torso\": null,\n\t\t\"Body\": null,\n\t\t\"Suspicion\": null\n      },\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPeopleByParams [Name]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ID_v = pm.variables.get(\"Name\");\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Name: \"+ Name_v+ \" успешно найден.\", function () {\r",
									"    pm.expect(jsonData.result[0].ID).to.eql(Name_v);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleByParams\",\n      \"params\":{\n      \t\"ID\": null,\n\t\t\"Name\": \"{{Name}}\",\n\t\t\"Surname\": null,\n\t\t\"Sex\": null,\n\t\t\"DateAfter\": null,\n\t\t\"DateBefore\": null,\n\t\t\"OperatorName\": null,\n\t\t\"OperatorSurname\": null,\n\t\t\"Device\": null,\n\t\t\"Mode\": null,\n\t\t\"Torso\": null,\n\t\t\"Body\": null,\n\t\t\"Suspicion\": null\n      },\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPeopleByParams [No Maches]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Нет найденных персон.\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"People_GUID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleByParams\",\n      \"params\":{\n      \t\"ID\": \"qa1\",\n\t\t\"Name\": null,\n\t\t\"Surname\": null,\n\t\t\"Sex\": null,\n\t\t\"DateAfter\": null,\n\t\t\"DateBefore\": null,\n\t\t\"OperatorName\": null,\n\t\t\"OperatorSurname\": null,\n\t\t\"Device\": null,\n\t\t\"Mode\": null,\n\t\t\"Torso\": null,\n\t\t\"Body\": null,\n\t\t\"Suspicion\": null\n      },\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPeopleByParams ID [SERVER]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"People_GUID\", jsonData.result.People_GUID);",
									"",
									"pm.test(\"Нет найденных персон.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"People_GUID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleByParams\",\n      \"params\":{\n      \t\"ID\": \"qa  2\",\n\t\t\"Name\": null,\n\t\t\"Surname\": null,\n\t\t\"Sex\": null,\n\t\t\"DateAfter\": null,\n\t\t\"DateBefore\": null,\n\t\t\"OperatorName\": null,\n\t\t\"OperatorSurname\": null,\n\t\t\"Device\": null,\n\t\t\"Mode\": null,\n\t\t\"Torso\": null,\n\t\t\"Body\": null,\n\t\t\"Suspicion\": null\n      },\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetImagesByPeopleGUIDAndParams",
			"item": [
				{
					"name": "GetImagesByPeopleGUIDAndParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"//считаем количество персон в ответе.\r",
									"var size = Object.keys(jsonData.result).length;\r",
									"pm.test(\"Count \"+ size);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetImagesByPeopleGUIDAndParams\",\n      \"params\":{\n      \t\"People_GUID\": \"MSCsewR61Uait6vyErAYhA==\",\n\t\t\"DateAfter\": null,\n\t\t\"DateBefore\": null,\n\t\t\"OperatorName\": null,\n\t\t\"OperatorSurname\": null,\n\t\t\"Device\": null,\n\t\t\"Mode\": null,\n\t\t\"Torso\": null,\n\t\t\"Body\": 1,\n\t\t\"Suspicion\": null\n      },\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetImagesByPeopleGUIDAndParams[SERVER]",
			"item": [
				{
					"name": "GetImagesByPeopleGUIDAndParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"//считаем количество персон в ответе.\r",
									"var size = Object.keys(jsonData.result).length;\r",
									"pm.test(\"Count \"+ size);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetImagesByPeopleGUIDAndParams\",\n      \"params\":{\n      \t\"People_GUID\": \"MSCsewR61Uait6vyErAYhA==\",\n\t\t\"DateAfter\": null,\n\t\t\"DateBefore\": null,\n\t\t\"OperatorName\": null,\n\t\t\"OperatorSurname\": null,\n\t\t\"Device\": null,\n\t\t\"Mode\": null,\n\t\t\"Torso\": null,\n\t\t\"Body\": 1,\n\t\t\"Suspicion\": null\n      },\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetPeopleSimpleSearch",
			"item": [
				{
					"name": "GetPeopleSimpleSearch[GoodRequest]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"//считаем количество персон в ответе.\r",
									"var size = Object.keys(jsonData.result).length;\r",
									"pm.test(\"Count \"+ size);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleSimpleSearch\",\n    \"params\": \"ID\",\n    \"id\": 123\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPeopleSimpleSearch[server][GoodRequest] Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleSimpleSearch\",\n    \"params\": \"te\",\n    \"id\": 123\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPeopleSimpleSearch_NoData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    var jsonData = pm.response.json();",
									"pm.test(\"Error: \"+ jsonData.error.message, function () {",
									"",
									"    pm.expect(jsonData.error.message).to.eql(\"search string must contains at least 2 symbols\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleSimpleSearch\",\n    \"params\": null,\n    \"id\": 123\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPeopleSimpleSearch_1Symbol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    var jsonData = pm.response.json();",
									"pm.test(\"Error: \"+ jsonData.error.message, function () {",
									"",
									"    pm.expect(jsonData.error.message).to.eql(\"search string must contains at least 2 symbols\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleSimpleSearch\",\n    \"params\": \"q\",\n    \"id\": 123\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetPeopleSimpleSearch [SERVER]",
			"item": [
				{
					"name": "GetPeopleSimpleSearch[GoodRequest]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"//считаем количество персон в ответе.\r",
									"var size = Object.keys(jsonData.result).length;\r",
									"pm.test(\"Count \"+ size);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleSimpleSearch\",\n    \"params\": \"te\",\n    \"id\": 123\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPeopleSimpleSearch[server][GoodRequest] Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleSimpleSearch\",\n    \"params\": \"te\",\n    \"id\": 123\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPeopleSimpleSearch_NoData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    var jsonData = pm.response.json();",
									"pm.test(\"Error: \"+ jsonData.error.message, function () {",
									"",
									"    pm.expect(jsonData.error.message).to.eql(\"search string must contains at least 2 symbols\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleSimpleSearch\",\n    \"params\": null,\n    \"id\": 123\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPeopleSimpleSearch_1Symbol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    var jsonData = pm.response.json();",
									"pm.test(\"Error: \"+ jsonData.error.message, function () {",
									"",
									"    pm.expect(jsonData.error.message).to.eql(\"search string must contains at least 2 symbols\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.GetPeopleSimpleSearch\",\n    \"params\": \"q\",\n    \"id\": 123\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AddPeople",
			"item": [
				{
					"name": "AddPeople [Filled in All Data]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ID_v = pm.variables.get(\"ID_random\");\r",
									"var Name_v = pm.variables.get(\"Name\");\r",
									"var Surname_v = pm.variables.get(\"Surname\");\r",
									"var PassportNumber_v = pm.variables.get(\"PassportNumber\");\r",
									"var DateOfBirth_v = pm.variables.get(\"DateOfBirth\");\r",
									"var Sex_v = pm.variables.get(\"Sex\");\r",
									"var jsonData = pm.response.json();\r",
									"console.log(ID_v);\r",
									"\r",
									"\r",
									"pm.test(\"ID: \"+ ID_v + \".\", function () {\r",
									"    pm.expect(jsonData.result.ID).to.eql(ID_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Name: \"+ Name_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Name).to.eql(Name_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Surname: \"+ Surname_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Surname).to.eql(Surname_v);\r",
									"});\r",
									"\r",
									"pm.test(\"PassportNumber: \"+ PassportNumber_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.PassportNumber).to.eql(PassportNumber_v);\r",
									"});\r",
									"\r",
									"pm.test(\"DateOfBirth: \"+ DateOfBirth_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.DateOfBirth).to.eql(DateOfBirth_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Sex: \"+ Sex_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Sex).to.eql(Sex_v);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ID_random\", \"ID\"+ _.random(1, 10000));",
									"pm.environment.set(\"Name\", \"Vasya \" + _.random(1, 1000));",
									"pm.environment.set(\"Surname\", \"Popov \" + _.random(1, 1000));",
									"pm.environment.set(\"PassportNumber\", \"PassNUM\" + _.random(10000, 99999));",
									"pm.environment.set(\"DateOfBirth\", \"1998-12-30\");",
									"pm.environment.set(\"Sex\", \"M\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": \"Add {{ID_random}}\",\n\t\t\t\t\"Name\": \"Add {{Name}}\",\n\t\t\t\t\"Surname\": \"Add {{Surname}}\",\n\t\t\t\t\"PassportNumber\": \"Add {{PassportNumber}}\",\n\t\t\t\t\"DateOfBirth\": \"{{DateOfBirth}}\",\n\t\t\t\t\"Sex\": \"{{Sex}}\",\n\t\t\t\t\"PhotoPath\": \"M\",\n\t\t\t\t\"Additional1\": \"AddM\",\n\t\t\t\t\"Additional2\": \"M\",\n\t\t\t\t\"Additional3\": \"M\"    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPeople [Filled in All Data]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ID_v = pm.variables.get(\"ID_random\");\r",
									"var Name_v = pm.variables.get(\"Name\");\r",
									"var Surname_v = pm.variables.get(\"Surname\");\r",
									"var PassportNumber_v = pm.variables.get(\"PassportNumber\");\r",
									"var DateOfBirth_v = pm.variables.get(\"DateOfBirth\");\r",
									"var Sex_v = pm.variables.get(\"Sex\");\r",
									"var jsonData = pm.response.json();\r",
									"console.log(ID_v);\r",
									"\r",
									"\r",
									"pm.test(\"ID: \"+ ID_v + \".\", function () {\r",
									"    pm.expect(jsonData.result.ID).to.eql(ID_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Name: \"+ Name_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Name).to.eql(Name_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Surname: \"+ Surname_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Surname).to.eql(Surname_v);\r",
									"});\r",
									"\r",
									"pm.test(\"PassportNumber: \"+ PassportNumber_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.PassportNumber).to.eql(PassportNumber_v);\r",
									"});\r",
									"\r",
									"pm.test(\"DateOfBirth: \"+ DateOfBirth_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.DateOfBirth).to.eql(DateOfBirth_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Sex: \"+ Sex_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Sex).to.eql(Sex_v);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ID_random\", \"ID\"+ _.random(1, 10000));",
									"pm.environment.set(\"Name\", \"Vasya \" + _.random(1, 1000));",
									"pm.environment.set(\"Surname\", \"Popov \" + _.random(1, 1000));",
									"pm.environment.set(\"PassportNumber\", \"PassNUM\" + _.random(10000, 99999));",
									"pm.environment.set(\"DateOfBirth\", \"1998-12-30\");",
									"pm.environment.set(\"Sex\", \"M\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": \"{{ID_random}}\",\n\t\t\t\t\"Name\": \"{{Name}}\",\n\t\t\t\t\"Surname\": \"{{Surname}}\",\n\t\t\t\t\"PassportNumber\": \"{{PassportNumber}}\",\n\t\t\t\t\"DateOfBirth\": \"{{DateOfBirth}}\",\n\t\t\t\t\"Sex\": \"{{Sex}}\",\n\t\t\t\t\"PhotoPath\": \"M\",\n\t\t\t\t\"Additional1\": \"M\",\n\t\t\t\t\"Additional2\": \"M\",\n\t\t\t\t\"Additional3\": \"M\"    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPeople [NULL]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Error: \" + jsonData.error.message, function () {\r",
									"    pm.expect(pm.response.text(jsonData.result)).to.not.include(\"People_GUID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": null,\n\t\t\t\t\"Name\": null,\n\t\t\t\t\"Surname\": null,\n\t\t\t\t\"PassportNumber\": null,\n\t\t\t\t\"DateOfBirth\": null,\n\t\t\t\t\"Sex\": null,\n\t\t\t\t\"PhotoPath\": null,\n\t\t\t\t\"Additional1\": null,\n\t\t\t\t\"Additional2\": null,\n\t\t\t\t\"Additional3\": null    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPeople [NO ID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Error: \" + jsonData.error.message, function () {\r",
									"    pm.expect(pm.response.text(jsonData.result)).to.not.include(\"People_GUID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": null,\n\t\t\t\t\"Name\": null,\n\t\t\t\t\"Surname\": null,\n\t\t\t\t\"PassportNumber\": null,\n\t\t\t\t\"DateOfBirth\": null,\n\t\t\t\t\"Sex\": null,\n\t\t\t\t\"PhotoPath\": null,\n\t\t\t\t\"Additional1\": null,\n\t\t\t\t\"Additional2\": null,\n\t\t\t\t\"Additional3\": null    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPeople [only ID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ID_v = pm.variables.get(\"ID_random\");\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"ID: \"+ ID_v + \" успешно создан.\", function () {\r",
									"    pm.expect(jsonData.result.ID).to.eql(ID_v);\r",
									"});\r",
									"var ID_v = pm.variables.set(\"ID_random\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ID_random\", \"ID \" + _.random(1, 1000))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": \"{{ID_random}}\",\n\t\t\t\t\"Name\": null,\n\t\t\t\t\"Surname\": null,\n\t\t\t\t\"PassportNumber\": null,\n\t\t\t\t\"DateOfBirth\": null,\n\t\t\t\t\"Sex\": null,\n\t\t\t\t\"PhotoPath\": null,\n\t\t\t\t\"Additional1\": null,\n\t\t\t\t\"Additional2\": null,\n\t\t\t\t\"Additional3\": null    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPeople [Duplicate]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ID_v = pm.variables.get(\"ID_random\");\r",
									"var jsonData = pm.response.json();\r",
									"console.log(ID_v);\r",
									"\r",
									"pm.test(ID_v + \" duplicated user records.\", function () {\r",
									"    pm.expect(jsonData.error.message).to.eql(\"duplicated user records\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": \"{{ID_random}}\",\n\t\t\t\t\"Name\": null,\n\t\t\t\t\"Surname\": null,\n\t\t\t\t\"PassportNumber\": null,\n\t\t\t\t\"DateOfBirth\": null,\n\t\t\t\t\"Sex\": null,\n\t\t\t\t\"PhotoPath\": null,\n\t\t\t\t\"Additional1\": null,\n\t\t\t\t\"Additional2\": null,\n\t\t\t\t\"Additional3\": null    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AddPeople [SERVER]",
			"item": [
				{
					"name": "AddPeople [Filled in All Data]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ID_v = pm.variables.get(\"ID_random\");\r",
									"var Name_v = pm.variables.get(\"Name\");\r",
									"var Surname_v = pm.variables.get(\"Surname\");\r",
									"var PassportNumber_v = pm.variables.get(\"PassportNumber\");\r",
									"var DateOfBirth_v = pm.variables.get(\"DateOfBirth\");\r",
									"var Sex_v = pm.variables.get(\"Sex\");\r",
									"var jsonData = pm.response.json();\r",
									"console.log(ID_v);\r",
									"\r",
									"\r",
									"pm.test(\"ID: \"+ ID_v + \".\", function () {\r",
									"    pm.expect(jsonData.result.ID).to.eql(ID_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Name: \"+ Name_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Name).to.eql(Name_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Surname: \"+ Surname_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Surname).to.eql(Surname_v);\r",
									"});\r",
									"\r",
									"pm.test(\"PassportNumber: \"+ PassportNumber_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.PassportNumber).to.eql(PassportNumber_v);\r",
									"});\r",
									"\r",
									"pm.test(\"DateOfBirth: \"+ DateOfBirth_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.DateOfBirth).to.eql(DateOfBirth_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Sex: \"+ Sex_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Sex).to.eql(Sex_v);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ID_random\", \"ID\"+ _.random(1, 10000));",
									"pm.environment.set(\"Name\", \"Vasya \" + _.random(1, 1000));",
									"pm.environment.set(\"Surname\", \"Popov \" + _.random(1, 1000));",
									"pm.environment.set(\"PassportNumber\", \"PassNUM\" + _.random(10000, 99999));",
									"pm.environment.set(\"DateOfBirth\", \"1998-12-30\");",
									"pm.environment.set(\"Sex\", \"M\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": \"Add {{ID_random}}\",\n\t\t\t\t\"Name\": \"Add {{Name}}\",\n\t\t\t\t\"Surname\": \"Add {{Surname}}\",\n\t\t\t\t\"PassportNumber\": \"Add {{PassportNumber}}\",\n\t\t\t\t\"DateOfBirth\": \"{{DateOfBirth}}\",\n\t\t\t\t\"Sex\": \"{{Sex}}\",\n\t\t\t\t\"PhotoPath\": \"M\",\n\t\t\t\t\"Additional1\": \"AddM\",\n\t\t\t\t\"Additional2\": \"M\",\n\t\t\t\t\"Additional3\": \"M\"    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPeople [Filled in All Data]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ID_v = pm.variables.get(\"ID_random\");\r",
									"var Name_v = pm.variables.get(\"Name\");\r",
									"var Surname_v = pm.variables.get(\"Surname\");\r",
									"var PassportNumber_v = pm.variables.get(\"PassportNumber\");\r",
									"var DateOfBirth_v = pm.variables.get(\"DateOfBirth\");\r",
									"var Sex_v = pm.variables.get(\"Sex\");\r",
									"var jsonData = pm.response.json();\r",
									"console.log(ID_v);\r",
									"\r",
									"\r",
									"pm.test(\"ID: \"+ ID_v + \".\", function () {\r",
									"    pm.expect(jsonData.result.ID).to.eql(ID_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Name: \"+ Name_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Name).to.eql(Name_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Surname: \"+ Surname_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Surname).to.eql(Surname_v);\r",
									"});\r",
									"\r",
									"pm.test(\"PassportNumber: \"+ PassportNumber_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.PassportNumber).to.eql(PassportNumber_v);\r",
									"});\r",
									"\r",
									"pm.test(\"DateOfBirth: \"+ DateOfBirth_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.DateOfBirth).to.eql(DateOfBirth_v);\r",
									"});\r",
									"\r",
									"pm.test(\"Sex: \"+ Sex_v + \".\", function () {\r",
									"   pm.expect(jsonData.result.Sex).to.eql(Sex_v);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ID_random\", \"ID\"+ _.random(1, 10000));",
									"pm.environment.set(\"Name\", \"Vasya \" + _.random(1, 1000));",
									"pm.environment.set(\"Surname\", \"Popov \" + _.random(1, 1000));",
									"pm.environment.set(\"PassportNumber\", \"PassNUM\" + _.random(10000, 99999));",
									"pm.environment.set(\"DateOfBirth\", \"1998-12-30\");",
									"pm.environment.set(\"Sex\", \"M\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": \"{{ID_random}}\",\n\t\t\t\t\"Name\": \"{{Name}}\",\n\t\t\t\t\"Surname\": \"{{Surname}}\",\n\t\t\t\t\"PassportNumber\": \"{{PassportNumber}}\",\n\t\t\t\t\"DateOfBirth\": \"{{DateOfBirth}}\",\n\t\t\t\t\"Sex\": \"{{Sex}}\",\n\t\t\t\t\"PhotoPath\": \"M\",\n\t\t\t\t\"Additional1\": \"M\",\n\t\t\t\t\"Additional2\": \"M\",\n\t\t\t\t\"Additional3\": \"M\"    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPeople [NULL]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Error: \" + jsonData.error.message, function () {\r",
									"    pm.expect(pm.response.text(jsonData.result)).to.not.include(\"People_GUID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": null,\n\t\t\t\t\"Name\": null,\n\t\t\t\t\"Surname\": null,\n\t\t\t\t\"PassportNumber\": null,\n\t\t\t\t\"DateOfBirth\": null,\n\t\t\t\t\"Sex\": null,\n\t\t\t\t\"PhotoPath\": null,\n\t\t\t\t\"Additional1\": null,\n\t\t\t\t\"Additional2\": null,\n\t\t\t\t\"Additional3\": null    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPeople [NO ID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Error: \" + jsonData.error.message, function () {\r",
									"    pm.expect(pm.response.text(jsonData.result)).to.not.include(\"People_GUID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": null,\n\t\t\t\t\"Name\": null,\n\t\t\t\t\"Surname\": null,\n\t\t\t\t\"PassportNumber\": null,\n\t\t\t\t\"DateOfBirth\": null,\n\t\t\t\t\"Sex\": null,\n\t\t\t\t\"PhotoPath\": null,\n\t\t\t\t\"Additional1\": null,\n\t\t\t\t\"Additional2\": null,\n\t\t\t\t\"Additional3\": null    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPeople [only ID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ID_v = pm.variables.get(\"ID_random\");\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"ID: \"+ ID_v + \" успешно создан.\", function () {\r",
									"    pm.expect(jsonData.result.ID).to.eql(ID_v);\r",
									"});\r",
									"var ID_v = pm.variables.set(\"ID_random\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ID_random\", \"ID \" + _.random(1, 1000))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": \"{{ID_random}}\",\n\t\t\t\t\"Name\": null,\n\t\t\t\t\"Surname\": null,\n\t\t\t\t\"PassportNumber\": null,\n\t\t\t\t\"DateOfBirth\": null,\n\t\t\t\t\"Sex\": null,\n\t\t\t\t\"PhotoPath\": null,\n\t\t\t\t\"Additional1\": null,\n\t\t\t\t\"Additional2\": null,\n\t\t\t\t\"Additional3\": null    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPeople [Duplicate]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ID_v = pm.variables.get(\"ID_random\");\r",
									"var jsonData = pm.response.json();\r",
									"console.log(ID_v);\r",
									"\r",
									"pm.test(ID_v + \" duplicated user records.\", function () {\r",
									"    pm.expect(jsonData.error.message).to.eql(\"duplicated user records\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"common.AddPeople\",\n    \"params\": {\n\t\t\t\t\"ID\": \"{{ID_random}}\",\n\t\t\t\t\"Name\": null,\n\t\t\t\t\"Surname\": null,\n\t\t\t\t\"PassportNumber\": null,\n\t\t\t\t\"DateOfBirth\": null,\n\t\t\t\t\"Sex\": null,\n\t\t\t\t\"PhotoPath\": null,\n\t\t\t\t\"Additional1\": null,\n\t\t\t\t\"Additional2\": null,\n\t\t\t\t\"Additional3\": null    \t\n    \t\t\t},\n    \t\t\t\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetDuplicateUserRecordsCount",
			"item": [
				{
					"name": "GetDuplicateUserRecordsCount",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"server.GetDuplicateUserRecordsCount\",\n    \"params\": \"qa4\",\n    \"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ExportPeopleScans",
			"item": [
				{
					"name": "ExportPeopleScans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"Export\", jsonData.result);",
									"",
									"pm.test(\"Export successfull.\" , function () {",
									"    pm.expect(pm.response.text()).to.include(\"result\");",
									"});",
									"pm.test(\"Jsonrpc.\" , function () {",
									"    pm.expect(pm.response.text()).to.include(\"result\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"2.0\",\n\"method\": \"common.ExportPeopleScans\",\n\"params\":\"Y8vqE2fyXUWKjqkBsCyuXA==\",\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "ExportPeopleScans [Wrong parametr]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Error: \"+jsonData.error.message+\".\" , function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"result\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"2.0\",\n\"method\": \"common.ExportPeopleScans\",\n\"params\":\"l Rtus3nH30S48PEZdYYdIA==\",\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "ExportPeopleScans [Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"1.0\",\n\"method\": \"common.ExportPeopleScans\",\n\"params\":\"{{PeopleGUID}}\",\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ExportPeopleScans [Server]",
			"item": [
				{
					"name": "ExportPeopleScans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"Export\", jsonData.result);",
									"",
									"pm.test(\"Export successfull.\" , function () {",
									"    pm.expect(pm.response.text()).to.include(\"result\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"2.0\",\n\"method\": \"common.ExportPeopleScans\",\n\"params\":\"{{People_GUID}}\",\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "ExportPeopleScans [Wrong parametr]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Error: \"+jsonData.error.message+\".\" , function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"result\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"2.0\",\n\"method\": \"common.ExportPeopleScans\",\n\"params\":\"l Rtus3nH30S48PEZdYYdIA==\",\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "ExportPeopleScans [Wrong protocol version]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Message: \" + jsonData.error.message+\", intsead of \"+jsonData.error.data.jsonrpc , function () {",
									"    pm.expect(pm.response.text()).includes(\"jsonrpc must be 2.0\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"1.0\",\n\"method\": \"common.ExportPeopleScans\",\n\"params\":\"{{PeopleGUID}}\",\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain_Server}}/rpc/v1",
							"host": [
								"{{domain_Server}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ImportPeopleScans",
			"item": [
				{
					"name": "ImportPeopleScans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Token",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"jsonrpc\": \"2.0\",\n\"method\": \"common.ImportPeopleScans\",\n\"params\": \"{{Export}}\",\n\t\n\"id\": 1\n}"
						},
						"url": {
							"raw": "{{domain}}/rpc/v1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"rpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "",
				"type": "string"
			},
			{
				"key": "key",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}